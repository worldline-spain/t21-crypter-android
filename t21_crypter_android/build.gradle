apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.novoda.bintray-release' // must be applied after your artifact generating plugin (eg. java / com.android.library)

version = "1.0.5"
def siteUrl = 'https://github.com/worldline-spain/t21-crypter-android'      // Homepage URL of the library
def gitUrl = 'https://github.com/worldline-spain/t21-crypter-android.git'   // Git repository URL
group = "com.tempos21.t21crypt"

def cfg = rootProject.ext.configuration;

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

publish {
    userOrg = 'worldline-spain'
    groupId = 'com.tempos21.t21crypt'
    artifactId = 't21_crypter_android'
    publishVersion = '1.0.5'
    desc = 'Android String crypter. Used for encryption of tokens'
    website = 'https://github.com/worldline-spain/t21-crypter-android'
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Android String crypter. Used for encryption of tokens'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'Worldline'
                        name 'Worldline.com'
                        email 'info.tempos21@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'commons-codec:commons-codec:20041127.091804'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.52-beta'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}